name: Build Images

on:
#  push:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
jobs:
  version:
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    runs-on: "ubuntu-latest"
    steps:
      - 
        name: Get the version
        id: get_version
        run: |
          if [ -z "$version" ]
          then
                version=$(date '+%Y%m%d')
                echo ::set-output name=version::"${version}"
          else
                echo ::set-output name=version::"${version}"
          fi
        env:
          version: ${{ github.event.inputs.version }}
  build:
    runs-on: ${{ matrix.host }}
    needs: [ version ]
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        host: [
          "ubuntu-latest",
          #"macos-10.15",
        ]
        config:
          - {
              name: "Debian bullseye arm64",
              basefile: "base_bullseye_arm64",
              compilefile: "compile_bullseye_arm64",
              finalfile: "final_bullseye_arm64",
              arch: "arm64",
              osname: "bullseye",
              ostype: "Debian"
            }
          - {
              name: "Debian bullseye armhf",
              basefile: "base_bullseye_armhf",
              compilefile: "compile_bullseye_armhf",
              finalfile: "final_bullseye_armhf",
              arch: "armhf",
              osname: "bullseye",
              ostype: "Debian"
            }
    name: 'Build:  ${{ matrix.config.name }}'
    steps:
      - 
        name: Checkout repository
        uses: actions/checkout@v3.0.1
      - 
        name: Get the version
        id: get_version
        run: |
          if [ -n "$ostype" ]
          then 
                osname=${ostype}_${osname}
          fi
          echo ::set-output name=version::"${version}-${osname}-${arch}"
        env:
          version: ${{needs.version.outputs.version }}
          arch: ${{ matrix.config.arch }}
          ostype: ${{ matrix.config.ostype }}
          osname: ${{ matrix.config.osname }}
      - 
        name: Create Base Image
        uses: Nature40/pimod@v0.3.0
        with:
          pifile: ${{ matrix.config.basefile }}.Pifile
      - 
        name: Create Compile Image
        uses: Nature40/pimod@v0.3.0
        with:
          pifile: ${{ matrix.config.compilefile }}.Pifile
      - 
        name: Create Final Image
        uses: Nature40/pimod@v0.3.0
        with:
          pifile: ${{ matrix.config.finalfile }}.Pifile
      - 
        name: Rename Image
        run: mv ${{ matrix.config.finalfile }}.img opendsh-${{ steps.get_version.outputs.version }}.img
      - 
        name: Package zip
        id: packagezip
        run: |
          IMG_FILENAME="opendsh-${{ steps.get_version.outputs.version }}.img"
          ZIP_FILENAME="opendsh-${{ steps.get_version.outputs.version }}.zip"
          SHA256HASHFILE="${IMG_FILENAME}.sha256"
          MD5ZIPHASHFILE="${ZIP_FILENAME}.md5"
          sha256sum "${IMG_FILENAME}" > "${SHA256HASHFILE}"
          zip "${ZIP_FILENAME}" "${IMG_FILENAME}" "${SHA256HASHFILE}"
          md5sum "${ZIP_FILENAME}" > "${MD5ZIPHASHFILE}"
          echo ::set-output name=ZIP_FILENAME::"${ZIP_FILENAME}"
          echo ::set-output name=SHA256HASHFILE::"${SHA256HASHFILE}"
          echo ::set-output name=MD5ZIPHASHFILE::"${MD5ZIPHASHFILE}"
      - 
        name: Upload build artifacts 
        id: upload_deploy
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.get_version.outputs.version }}
          path: |
            ${{ steps.packagezip.outputs.ZIP_FILENAME }}
            ${{ steps.packagezip.outputs.MD5ZIPHASHFILE }}
# Create Release
  release:
    runs-on: ubuntu-latest
    needs: [ version, build ]
    name: 'Create release'
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_name: ${{ steps.create_release.outputs.name }}
      release_tag_name: ${{ steps.create_release.outputs.tag_name }}
      release_body: ${{ steps.create_release.outputs.body }}
      release_html_url: ${{ steps.create_release.outputs.html_url }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    steps:
      - 
        name: Create GitHub release
        id: create_release
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# Upload release artifacts
  upload:
    needs: [ version, build, release ]
    runs-on: ${{ matrix.host }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        host: [
          "ubuntu-latest",
          #"macos-10.15",
        ]
        config:
          - {
              name: "Debian bullseye arm64",
              arch: "arm64",
              osname: "bullseye",
              ostype: "Debian"
            }
          - {
              name: "Debian bullseye armhf",
              arch: "armhf",
              osname: "bullseye",
              ostype: "Debian"
            }
    name: 'Upload release:  ${{ matrix.config.name }}'
    steps:
      - 
        name: Get the version
        id: get_version
        run: |
          if [ -n "$ostype" ]
          then 
                osname=${ostype}_${osname}
          fi
          echo ::set-output name=version::"${version}-${osname}-${arch}"
        env:
          version: ${{needs.version.outputs.version }}
          arch: ${{ matrix.config.arch }}
          osname: ${{ matrix.config.osname }}
          ostype: ${{ matrix.config.ostype }}
      - 
        name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ steps.get_version.outputs.version }}
      - 
        name: Upload zip to release
        id: upload_zip
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ steps.get_version.outputs.version }}
        with:
          upload_url: ${{needs.release.outputs.release_upload_url}}
          asset_path: opendsh-${{ steps.get_version.outputs.version }}.zip
          asset_name: opendsh-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
      - 
        name: Get File Hashes from files
        id: filehashes
        run: |
          ZIP_FILENAME="opendsh-${{ steps.get_version.outputs.version }}.zip"
          MD5_ZIPHASHFILE="${ZIP_FILENAME}.md5"
          MD5_ZIPHASH="cat ${MD5_ZIPHASHFILE}"
          echo ${MD5_ZIPHASH}
          echo ::set-output name=ZIP_FILENAME::"${ZIP_FILENAME}"
          echo ::set-output name=MD5_ZIPHASH::"${MD5_ZIPHASH}"
