name: build

on:
#  schedule:
#    - cron: '0 10 * * *' # everyday at 10am

#  pull_request:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - 
        name: Get the version
        id: get_version
        run: |
          echo ::set-output name=version::"${version}"
        env:
          version: ${{ github.event.inputs.version }}
      - 
        name: pi-gen config
        id: pi-gen_config
        run: |
          cat > config <<EOF
          IMG_NAME='${version}'
          FIRST_USER_NAME='${FIRST_USER_NAME}'
          FIRST_USER_PASS='${FIRST_USER_NAME}'
          EOF
          touch ./stage5/SKIP
          touch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES
          echo ::set-output name=FIRST_USER_NAME::"${FIRST_USER_NAME}"
        working-directory: ./pi-gen
        env:
          version: ${{ steps.get_version.outputs.version }}
          FIRST_USER_NAME: 'opendsh'
      -
        name: opendsh
        id: opendsh
        run: |
          rm -rf ./stage3 ./stage4 ./stage5
          mkdir -p ./stage3/00-prereqs
          mkdir -p ./stage3/01-packages
          mkdir -p ./stage3/02-install-dash
          cd ./stage3
          cp ../stage2/prerun.sh prerun.sh
          chmod +x prerun.sh
          cat > EXPORT_IMAGE <<EOF
          IMG_SUFFIX="-opendsh"
          EOF
          cat > EXPORT_NOOBS <<EOF
          NOOBS_NAME="Opendsh (32-bit) - ${version}"
          NOOBS_DESCRIPTION="Opendsh - ${version}"
          EOF
          cat > 00-prereqs/00-packages <<EOF
          git
          EOF
          cat > 01-packages/00-packages-nr <<EOF
          xserver-xorg-core
          xserver-xorg
          xfonts-base
          xinit
          xfce4
          desktop-base
          lightdm
          EOF
          cat > 02-install-dash/00-run.sh <<EOF
          #!/bin/bash -e
          
          on_chroot << END
          echo '>>> Set Debian frontend to Noninteractive'
          echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
          export DEBIAN_FRONTEND=noninteractive
          echo '>>> Update CA certs for a secure connection to GitHub'
          update-ca-certificates -f
          echo '>>> Download latest Dash Installer'
          git clone --depth=1 https://github.com/openDsh/dash.git /home/${FIRST_USER_NAME}/dash
          chmod -R 775 /home/${FIRST_USER_NAME}/dash
          chown -R ${FIRST_USER_NAME}:${FIRST_USER_NAME} /home/${FIRST_USER_NAME}/dash
          END
          EOF
          chmod +x 02-install-dash/00-run.sh
          cat > 02-install-dash/01-run.sh <<EOF
          #!/bin/bash -e

          on_chroot << END
          echo "Installing Dash"
          sed -i -e 's/message( WARNING/message( /g' /home/${FIRST_USER_NAME}/dash/cmake_modules/functions.cmake
          ./home/${FIRST_USER_NAME}/dash/install.sh
          END
          EOF
          chmod +x 02-install-dash/01-run.sh
          cat > 02-install-dash/02-run-chroot.sh <<EOF
          #!/bin/bash -e
          
          apt-get autoremove -y --purge
          EOF
          chmod +x 02-install-dash/02-run-chroot.sh
          cat > 02-install-dash/03-run.sh <<EOF
          #!/bin/bash -e
          
          mkdir -p /home/${FIRST_USER_NAME}/.ssh
          chown ${FIRST_USER_NAME}:${FIRST_USER_NAME} /home/${FIRST_USER_NAME}/.ssh
          chmod 700 /home/${FIRST_USER_NAME}/.ssh
          touch /home/${FIRST_USER_NAME}/.ssh/authorized_keys
          chown ${FIRST_USER_NAME}:${FIRST_USER_NAME} /home/${FIRST_USER_NAME}/.ssh/authorized_keys
          chmod 644 /home/${FIRST_USER_NAME}/.ssh/authorized_keys
          EOF
          chmod +x 02-install-dash/03-run.sh
          cat > 02-install-dash/04-run-chroot.sh <<EOF
          #!/bin/bash -e
          cat > /lib/systemd/system/dash.service <<END
          [Unit]
          Description=Start Dash
  
          [Service]
          Environment=DISPLAY=:0
          Environment=XAUTHORITY=/home/${FIRST_USER_NAME}/.Xauthority
          WorkingDirectory=/home/${FIRST_USER_NAME}
          ExecStart=/home/${FIRST_USER_NAME}/dash/bin/ia
          Restart=always
          RestartSec=10s
          KillMode=process
          TimeoutSec=infinity
  
          [Install]
          WantedBy=graphical.target
          END
          systemctl daemon-reload
          systemctl enable dash.service
          EOF
          chmod +x 02-install-dash/04-run-chroot.sh
        working-directory: ./pi-gen
        env:
          version: ${{ steps.get_version.outputs.version }}
          FIRST_USER_NAME: ${{ steps.pi-gen_config.outputs.FIRST_USER_NAME }}
      -
       name: show config
       id: show_config
       run: |
          cat config
          cat ./stage3/EXPORT_NOOBS
          cat ./stage3/EXPORT_IMAGE
       working-directory: ./pi-gen
      -
        name: Run build
        id: build-docker
        run: bash ./build-docker.sh
        working-directory: ./pi-gen
      - 
        name: Upload build artifacts 
        id: upload_deploy
        uses: actions/upload-artifact@v2
        with:
          name: deploy
          path: |
            ./pi-gen/deploy/*-opendsh.info
            ./pi-gen/deploy/*-opendsh.zip
            ./pi-gen/deploy/build.log
  release:
    needs: [build]
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - 
        name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          draft: true
          prerelease: true
      - 
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: deploy
      - 
        name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          ARTIFACT_PATHNAME=$(ls *.zip | head -n 1)
          ARTIFACT_NAME=$(basename $ARTIFACT_PATHNAME)
          echo ::set-output name=artifact_filename::${ARTIFACT_NAME}
          echo ::set-output name=artifact_path::${ARTIFACT_PATHNAME}
      - 
        name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.get_release_info.outputs.artifact_path }}
          asset_name: ${{ steps.get_release_info.outputs.artifact_filename }}
          asset_content_type: application/zip
